{% comment %}
  Contador Regresivo con Efecto Flip Clock
{% endcomment %}

<div class="countdown-banner" style="background-color: {{ section.settings.background_color }};">
  <div class="countdown-container">
    <div class="countdown-text">
      <h2 style="color: {{ section.settings.text_color }};">{{ section.settings.title_text }}</h2>
    </div>
    <div class="countdown-timer">
      <!-- HORAS -->
      <div class="timer-group">
        <div class="flip-clock">
          <div class="flip-card">
            <div class="top" id="hours-top">00</div>
            <div class="bottom" id="hours-bottom">00</div>
            <div class="flip-top" id="hours-flip-top">00</div>
            <div class="flip-bottom" id="hours-flip-bottom">00</div>
          </div>
        </div>
        <div class="timer-label">{{ section.settings.hours_label }}</div>
      </div>

      <!-- SEPARADOR -->
      <div class="timer-separator">
        <div class="separator-dot"></div>
        <div class="separator-dot"></div>
      </div>

      <!-- MINUTOS -->
      <div class="timer-group">
        <div class="flip-clock">
          <div class="flip-card">
            <div class="top" id="minutes-top">00</div>
            <div class="bottom" id="minutes-bottom">00</div>
            <div class="flip-top" id="minutes-flip-top">00</div>
            <div class="flip-bottom" id="minutes-flip-bottom">00</div>
          </div>
        </div>
        <div class="timer-label">{{ section.settings.minutes_label }}</div>
      </div>

      <!-- SEPARADOR -->
      <div class="timer-separator">
        <div class="separator-dot"></div>
        <div class="separator-dot"></div>
      </div>

      <!-- SEGUNDOS -->
      <div class="timer-group">
        <div class="flip-clock">
          <div class="flip-card">
            <div class="top" id="seconds-top">00</div>
            <div class="bottom" id="seconds-bottom">00</div>
            <div class="flip-top" id="seconds-flip-top">00</div>
            <div class="flip-bottom" id="seconds-flip-bottom">00</div>
          </div>
        </div>
        <div class="timer-label">{{ section.settings.seconds_label }}</div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Estilos básicos */
  .countdown-banner {
    width: 100%;
    padding: 15px 0;
    background-color: #FF001D;
  }

  .countdown-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
  }

  .countdown-text {
    width: 50%;
  }

  .countdown-text h2 {
    color: #FFFFFF;
    font-family: 'Montserrat', sans-serif;
    font-size: {{ section.settings.title_size }}px;
    font-weight: 700;
    line-height: 1.2;
    margin: 0;
    text-transform: uppercase;
  }

  .countdown-timer {
    width: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .timer-group {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0 5px;
  }

  /* Flip Clock Styles */
  .flip-clock {
    width: {{ section.settings.timer_size }}px;
    height: {{ section.settings.timer_size }}px;
    position: relative;
    border-radius: {{ section.settings.timer_border_radius }}px;
    overflow: hidden;
  }

  .flip-card {
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: {{ section.settings.timer_border_radius }}px;
  }

  .top, .bottom, .flip-top, .flip-bottom {
    position: absolute;
    left: 0;
    width: 100%;
    height: 50%;
    background: white;
    color: black;
    font-size: calc({{ section.settings.timer_size }}px * 0.6);
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .top, .flip-top {
    top: 0;
    border-bottom: 1px solid rgba(0,0,0,0.1);
    border-top-left-radius: {{ section.settings.timer_border_radius }}px;
    border-top-right-radius: {{ section.settings.timer_border_radius }}px;
  }

  .bottom, .flip-bottom {
    bottom: 0;
    border-top: 1px solid rgba(0,0,0,0.1);
    border-bottom-left-radius: {{ section.settings.timer_border_radius }}px;
    border-bottom-right-radius: {{ section.settings.timer_border_radius }}px;
  }

  /* Contenido centrado */
  .top, .flip-top {
    line-height: {{ section.settings.timer_size }}px;
    /* Ajustar para centrar verticalmente */
    padding-bottom: calc({{ section.settings.timer_size }}px * 0.25);
  }

  .bottom, .flip-bottom {
    line-height: 0;
    /* Ajustar para centrar verticalmente */
    padding-top: calc({{ section.settings.timer_size }}px * 0.25);
  }

  /* Elementos de animación */
  .flip-top {
    z-index: 3;
    transform-origin: bottom;
    transform: rotateX(0deg);
    backface-visibility: hidden;
  }

  .flip-bottom {
    z-index: 2;
    transform-origin: top;
    transform: rotateX(90deg);
    backface-visibility: hidden;
  }

  /* Separadores y etiquetas */
  .timer-separator {
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    height: {{ section.settings.timer_size }}px;
    padding: 0 5px;
  }

  .separator-dot {
    width: 8px;
    height: 8px;
    background-color: white;
    border-radius: 50%;
    margin: 5px 0;
  }

  .timer-label {
    color: white;
    font-size: {{ section.settings.label_size }}px;
    margin-top: 5px;
    text-align: center;
  }

  /* Animaciones */
  @keyframes flipTop {
    0% {
      transform: rotateX(0deg);
      z-index: 3;
    }
    100% {
      transform: rotateX(-90deg);
      z-index: 0;
    }
  }

  @keyframes flipBottom {
    0% {
      transform: rotateX(90deg);
      z-index: 2;
    }
    100% {
      transform: rotateX(0deg);
      z-index: 3;
    }
  }

  .animate-top {
    animation: flipTop 0.5s ease-in both;
  }

  .animate-bottom {
    animation: flipBottom 0.5s 0.5s ease-out both;
  }

  /* Media Queries */
  @media screen and (max-width: 768px) {
    .countdown-container {
      flex-direction: column;
    }

    .countdown-text, .countdown-timer {
      width: 100%;
    }

    .countdown-text {
      margin-bottom: 15px;
      text-align: center;
    }

    .countdown-text h2 {
      font-size: calc({{ section.settings.title_size }}px * 0.7);
    }

    .flip-clock {
      width: calc({{ section.settings.timer_size }}px * 0.8);
      height: calc({{ section.settings.timer_size }}px * 0.8);
    }

    .top, .bottom, .flip-top, .flip-bottom {
      font-size: calc({{ section.settings.timer_size }}px * 0.5);
    }

    .top, .flip-top {
      line-height: calc({{ section.settings.timer_size }}px * 0.8);
      padding-bottom: calc({{ section.settings.timer_size }}px * 0.2);
    }

    .bottom, .flip-bottom {
      padding-top: calc({{ section.settings.timer_size }}px * 0.2);
    }

    .separator-dot {
      width: 6px;
      height: 6px;
      margin: 4px 0;
    }

    .timer-label {
      font-size: calc({{ section.settings.label_size }}px * 0.9);
    }
  }

  @media screen and (max-width: 480px) {
    .countdown-text h2 {
      font-size: calc({{ section.settings.title_size }}px * 0.5);
    }

    .flip-clock {
      width: calc({{ section.settings.timer_size }}px * 0.7);
      height: calc({{ section.settings.timer_size }}px * 0.7);
    }

    .top, .bottom, .flip-top, .flip-bottom {
      font-size: calc({{ section.settings.timer_size }}px * 0.4);
    }

    .top, .flip-top {
      line-height: calc({{ section.settings.timer_size }}px * 0.7);
      padding-bottom: calc({{ section.settings.timer_size }}px * 0.175);
    }

    .bottom, .flip-bottom {
      padding-top: calc({{ section.settings.timer_size }}px * 0.175);
    }

    .separator-dot {
      width: 5px;
      height: 5px;
      margin: 3px 0;
    }

    .timer-label {
      font-size: calc({{ section.settings.label_size }}px * 0.8);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Referencias a los elementos estáticos
    const hoursTop = document.getElementById('hours-top');
    const hoursBottom = document.getElementById('hours-bottom');
    const minutesTop = document.getElementById('minutes-top');
    const minutesBottom = document.getElementById('minutes-bottom');
    const secondsTop = document.getElementById('seconds-top');
    const secondsBottom = document.getElementById('seconds-bottom');

    // Referencias a los elementos de animación
    const hoursFlipTop = document.getElementById('hours-flip-top');
    const hoursFlipBottom = document.getElementById('hours-flip-bottom');
    const minutesFlipTop = document.getElementById('minutes-flip-top');
    const minutesFlipBottom = document.getElementById('minutes-flip-bottom');
    const secondsFlipTop = document.getElementById('seconds-flip-top');
    const secondsFlipBottom = document.getElementById('seconds-flip-bottom');

    // Variables para seguimiento
    let currentHours = -1;
    let currentMinutes = -1;
    let currentSeconds = -1;

    // Estado de animación
    let isAnimating = {
      hours: false,
      minutes: false,
      seconds: false
    };

    // Establecer tiempo de finalización
    let countDownDate;

    {% if section.settings.date_type == 'specific_date' %}
      // Usar fecha específica
      countDownDate = new Date("{{ section.settings.end_date }}").getTime();
    {% else %}
      // Usar duración desde ahora
      countDownDate = new Date();
      countDownDate.setHours(countDownDate.getHours() + {{ section.settings.duration_hours }});
      countDownDate.setMinutes(countDownDate.getMinutes() + {{ section.settings.duration_minutes }});
      countDownDate = countDownDate.getTime();
    {% endif %}

    // Si el timer es persistente, guardar en localStorage
    {% if section.settings.persistent_timer %}
      const storedEndTime = localStorage.getItem('countdownEndTime');
      if (storedEndTime) {
        countDownDate = parseInt(storedEndTime);
      } else {
        localStorage.setItem('countdownEndTime', countDownDate);
      }
    {% endif %}

    // Función para formatear números
    function formatNumber(num) {
      return num < 10 ? "0" + num : num.toString();
    }

    // Función para animar el cambio
    function animateFlip(unit, newValue) {
      // Si ya está animando, no hacer nada
      if (isAnimating[unit]) return;

      // Formatear el valor
      newValue = formatNumber(newValue);

      // Obtener referencias a los elementos según la unidad
      let staticTop, staticBottom, flipTop, flipBottom;

      if (unit === 'hours') {
        staticTop = hoursTop;
        staticBottom = hoursBottom;
        flipTop = hoursFlipTop;
        flipBottom = hoursFlipBottom;
      } else if (unit === 'minutes') {
        staticTop = minutesTop;
        staticBottom = minutesBottom;
        flipTop = minutesFlipTop;
        flipBottom = minutesFlipBottom;
      } else if (unit === 'seconds') {
        staticTop = secondsTop;
        staticBottom = secondsBottom;
        flipTop = secondsFlipTop;
        flipBottom = secondsFlipBottom;
      }

      // Si los valores ya están actualizados, no animar
      if (staticTop.textContent === newValue) return;

      // Marcar como animando
      isAnimating[unit] = true;

      // Preparar para la animación
      flipTop.textContent = staticTop.textContent;
      flipBottom.textContent = newValue;

      // Iniciar animaciones
      flipTop.classList.add('animate-top');
      flipBottom.classList.add('animate-bottom');

      // A mitad de la animación, actualizar el valor estático superior
      setTimeout(function() {
        staticTop.textContent = newValue;
      }, 500);

      // Al final de la animación, actualizar el valor estático inferior
      // y restaurar elementos de animación
      setTimeout(function() {
        staticBottom.textContent = newValue;

        // Quitar clases de animación
        flipTop.classList.remove('animate-top');
        flipBottom.classList.remove('animate-bottom');

        // Ya no está animando
        isAnimating[unit] = false;
      }, 1000);
    }

    // Actualizar contador cada segundo
    const countdown = setInterval(function() {
      const now = new Date().getTime();
      const distance = countDownDate - now;

      // Si el contador llegó a cero
      if (distance <= 0) {
        clearInterval(countdown);

        // Mostrar todos en cero
        hoursTop.textContent = "00";
        hoursBottom.textContent = "00";
        minutesTop.textContent = "00";
        minutesBottom.textContent = "00";
        secondsTop.textContent = "00";
        secondsBottom.textContent = "00";

        {% if section.settings.hide_after_end %}
        setTimeout(function() {
          document.querySelector('.countdown-banner').style.display = 'none';
        }, 3000);
        {% endif %}

        {% if section.settings.redirect_after_end and section.settings.redirect_url != blank %}
        setTimeout(function() {
          window.location.href = "{{ section.settings.redirect_url }}";
        }, {{ section.settings.redirect_delay }} * 1000);
        {% endif %}

        {% if section.settings.persistent_timer %}
        localStorage.removeItem('countdownEndTime');
        {% endif %}

        return;
      }

      // Cálculo de tiempo
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      // Si es la primera actualización, establecer valores iniciales sin animación
      if (currentHours === -1) {
        hoursTop.textContent = formatNumber(hours);
        hoursBottom.textContent = formatNumber(hours);
        minutesTop.textContent = formatNumber(minutes);
        minutesBottom.textContent = formatNumber(minutes);
        secondsTop.textContent = formatNumber(seconds);
        secondsBottom.textContent = formatNumber(seconds);

        currentHours = hours;
        currentMinutes = minutes;
        currentSeconds = seconds;
        return;
      }

      // Verificar cambios para aplicar animación
      if (hours !== currentHours) {
        // Verificar si cambió el último dígito
        const lastDigitHours = hours % 10;
        const lastDigitCurrentHours = currentHours % 10;

        if (lastDigitHours !== lastDigitCurrentHours) {
          animateFlip('hours', hours);
        } else {
          // Actualizar sin animación
          hoursTop.textContent = formatNumber(hours);
          hoursBottom.textContent = formatNumber(hours);
        }
        currentHours = hours;
      }

      if (minutes !== currentMinutes) {
        // Verificar si cambió el último dígito
        const lastDigitMinutes = minutes % 10;
        const lastDigitCurrentMinutes = currentMinutes % 10;

        if (lastDigitMinutes !== lastDigitCurrentMinutes) {
          animateFlip('minutes', minutes);
        } else {
          // Actualizar sin animación
          minutesTop.textContent = formatNumber(minutes);
          minutesBottom.textContent = formatNumber(minutes);
        }
        currentMinutes = minutes;
      }

      if (seconds !== currentSeconds) {
        // Verificar si cambió el último dígito
        const lastDigitSeconds = seconds % 10;
        const lastDigitCurrentSeconds = currentSeconds % 10;

        if (lastDigitSeconds !== lastDigitCurrentSeconds) {
          animateFlip('seconds', seconds);
        } else {
          // Actualizar sin animación
          secondsTop.textContent = formatNumber(seconds);
          secondsBottom.textContent = formatNumber(seconds);
        }
        currentSeconds = seconds;
      }
    }, 1000);
  });
</script>

{% schema %}
{
  "name": "Contador Regresivo",
  "settings": [
    {
      "type": "color",
      "id": "background_color",
      "label": "Color de fondo",
      "default": "#FF001D"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Color de texto",
      "default": "#FFFFFF"
    },
    {
      "type": "text",
      "id": "title_text",
      "label": "Texto del título",
      "default": "FALTA POCO TIEMPO PARA QUE ESTA OFERTA TERMINE"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 60,
      "step": 1,
      "label": "Tamaño del título (px)",
      "default": 32
    },
    {
      "type": "select",
      "id": "date_type",
      "label": "Tipo de cuenta regresiva",
      "options": [
        {
          "value": "duration",
          "label": "Duración desde ahora"
        },
        {
          "value": "specific_date",
          "label": "Fecha específica"
        }
      ],
      "default": "duration"
    },
    {
      "type": "text",
      "id": "end_date",
      "label": "Fecha final (YYYY-MM-DD)",
      "default": "2025-12-31"
    },
    {
      "type": "number",
      "id": "duration_hours",
      "label": "Duración (horas)",
      "default": 24
    },
    {
      "type": "number",
      "id": "duration_minutes",
      "label": "Duración (minutos adicionales)",
      "default": 0
    },
    {
      "type": "checkbox",
      "id": "persistent_timer",
      "label": "Persistir temporizador entre visitas",
      "default": true
    },
    {
      "type": "text",
      "id": "hours_label",
      "label": "Etiqueta para horas",
      "default": "Horas"
    },
    {
      "type": "text",
      "id": "minutes_label",
      "label": "Etiqueta para minutos",
      "default": "Minutos"
    },
    {
      "type": "text",
      "id": "seconds_label",
      "label": "Etiqueta para segundos",
      "default": "Segundos"
    },
    {
      "type": "range",
      "id": "timer_size",
      "min": 40,
      "max": 120,
      "step": 5,
      "label": "Tamaño del temporizador (px)",
      "default": 75
    },
    {
      "type": "range",
      "id": "timer_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "label": "Radio de borde",
      "default": 8
    },
    {
      "type": "range",
      "id": "label_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "label": "Tamaño de etiquetas (px)",
      "default": 14
    },
    {
      "type": "checkbox",
      "id": "hide_after_end",
      "label": "Ocultar al finalizar",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "redirect_after_end",
      "label": "Redirigir al finalizar",
      "default": false
    },
    {
      "type": "url",
      "id": "redirect_url",
      "label": "URL de redirección"
    },
    {
      "type": "number",
      "id": "redirect_delay",
      "label": "Retraso antes de redirigir (segundos)",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Contador Regresivo",
      "category": "Promoción"
    }
  ]
}
{% endschema %}
